class Move {
    field Board board;
    field int startX;
    field int startY;
    field int endX;
    field int endY;
    
    constructor Move new(Board _board, Array moveDescription) {
        let board = _board;
        let startX = moveDescription[0] - 65;
        let startY = (8 - (moveDescription[1] - 48));
        let endX = moveDescription[2] - 65;
        let endY = (8 - (moveDescription[3] - 48)) ;
        do Memory.deAlloc(moveDescription);

        return this;
    }

    method bool checkLegal() {
        var bool startPosValid;
        var bool endPosValid;
        var int pieceId, color, piece, targetPiece, dx, dy;

        let startPosValid = (startX < 8) & (startY < 8) & (startX > -1) & (startY > -1);
        let endPosValid = (endX < 8) & (endY < 8) & (endX > -1) & (endY > -1);

        if (~(startPosValid & endPosValid)) {
            return false;
        }

        let pieceId = board.getPieceId(getStartIndex());
        let color = pieceId / 16;
        let piece = Help.mod(pieceId, 16);

        let targetPiece = board.getPieceId(getEndIndex());

        // Check that we do not eat the same color
        if (((targetPiece / 16) = color) & (~board.idFree(getEndIndex()))) {
            return false;
        }

        let dx = Help.abs(endX - startX);
        let dy = Help.abs(endY - startY);

        // Check pawn
        if (piece = 2){
            if ((dy = 0) | ((dx + dy) > 2)){
                return false;
            }
            if ((dy = 2) & ~(startY = 1) & ~(startY = 6)){
                return false;
            }
            if ((color = 0) & (startY < endY)){
                return false;
            }
            if ((color = 1) & (startY > endY)){
                return false;
            }
            if ((dx = 1) & board.idFree(getEndIndex())){
                return false;
            }
            if ((dx = 0) & ~board.idFree(getEndIndex())){
                return false;
            }

            return checkWay(dx, dy);
        }

        // Check knight
        if (piece = 4){
            return ((dx = 2) & (dy = 1)) | ((dx = 1) & (dy = 2)); 
        }

        // Check bishop
        if (piece = 6){
            if (~(dx = dy)) {
                return false;
            }
            
            return checkWay(dx, dy);
        }

        // Check rook
        if (piece = 8){
            if ((dx > 0) & (dy > 0)) {
                return false;
            }
            
            return checkWay(dx, dy);
        }

        // Check queen
        if (piece = 10){
            if (~(dx = dy) & (dx > 0) & (dy > 0)) {
                return false;
            }
            
            return checkWay(dx, dy);
        }

        // Check king
        if (piece = 12){
            return (dx < 2) & (dy < 2);
        } 

        return false;
    }
 
    method bool checkWay(int dx, int dy){
        var int i;
        var int stepX;
        var int stepY;

        let stepX = Help.norm(endX - startX);
        let stepY = Help.norm(endY - startY);
        
        if (dx = dy){
            let i = dx - 1;
        }
        else{
            let i = dx + dy - 1;
        }
        
        while (i > 0){
            if (~board.idFree(getIndex(startX + (i * stepX), startY + (i * stepY)))){
                return false;
            }
            let i = i - 1;
        }

        return true;
    }


    method int getStartIndex() {
        return getIndex(startX, startY);
    }

    method int getEndIndex() {
        return getIndex(endX, endY);
    }

    method int getIndex(int x, int y){
        return y * 8 + x;
    }
}
