class Move {
    field Board board;
    field int startX;
    field int startY;
    field int endX;
    field int endY;
    
    constructor Move new(Board _board, Array moveDescription) {
        let board = _board;
        let startX = moveDescription[0] - 65;
        let startY = (8 - (moveDescription[1] - 48));
        let endX = moveDescription[2] - 65;
        let endY = (8 - (moveDescription[3] - 48)) ;
        do Memory.deAlloc(moveDescription);

        return this;
    }

    method bool checkLegal() {
        var bool startPosValid;
        var bool endPosValid;
        var int pieceId, color, piece, targetPiece, dx, dy;

        let startPosValid = (startX < 8) & (startY < 8) & (startX > -1) & (startY > -1);
        let endPosValid = (endX < 8) & (endY < 8) & (endX > -1) & (endY > -1);

        if (~(startPosValid & endPosValid)) {
            return false;
        }

        let pieceId = board.getPieceId(getStartIndex());
        let color = pieceId / 16;
        let piece = Help.mod(pieceId, 16);

        let targetPiece = board.getPieceId(getEndIndex());

        do Output.printInt((targetPiece / 16) = color);
        do Output.printInt(~board.idFree(targetPiece));

        // VOID CANNOT MOVE
        if (board.idFree(getStartIndex())) {
            return false;
        }

        // Check that we do not eat the same color
        if (((targetPiece / 16) = color) & (~board.idFree(getEndIndex()))) {
            return false;
        }

        // Check knight
        if (piece = 4){
            let dx = Help.abs(startX - endX);
            let dy = Help.abs(startY - endY);
            
            return ((dx = 2) & (dy = 1)) | ((dx = 1) & (dy = 2)); 
        }

        // Check bishop
        if (piece = 6){
            let dx = Help.abs(startX - endX);
            let dy = Help.abs(startY - endY);

            if (~(dx = dy)) {
                return false;
            }
        }

        // Check king
        if (piece = 12){
            let dx = Help.abs(startX - endX);
            let dy = Help.abs(startY - endY);

            return (dx < 2) & (dy < 2);
        } 

        if (targetPiece = 12) {
            // Black wins
        }

        if (targetPiece = 28) {
            // White wins
        }

        return true;
    }


    method int getStartIndex() {
        return getIndex(startX, startY);
    }

    method int getEndIndex() {
        return getIndex(endX, endY);
    }

    method int getIndex(int x, int y){
        return y * 8 + x;
    }
}
